---
title: "Das Klima in Freiburg"
format: 
  dashboard:
    output-file: index.html
    nav-buttons:
      - icon: github
        href: https://github.com/carluna/klima-freiburg
    theme: styles.scss
---

```{r libraries}
#| context: setup
require(lubridate)
require(dplyr)
require(tidyr)
require(ggplot2)
require(openmeteo)
require(echarts4r)  
```

```{r getData}
#| context: setup
#| message: false
#| warning: false
#| output: false
df_now <- weather_now("freiburg", response_units = list(
                   temperature_unit = "celsius"))

weather_now <- tibble(
  logo = case_when(
    df_now$temperature <= 0 ~ 'snowflake',
    df_now$temperature > 0 & df_now$temperature <= 15 ~ 'temperature-half',
    df_now$temperature > 15 ~ 'sun'),
  color = case_when(
    df_now$temperature <= 0 ~ 'blue',
    df_now$temperature > 0 & df_now$temperature <= 15 ~ 'yellow',
    df_now$temperature > 15 ~ 'red'),
  value = case_when(
    df_now$temperature <= 0 ~ 'Eisig!',
    df_now$temperature > 0 & df_now$temperature <= 15 ~ 'Frisch',
    df_now$temperature > 15 ~ 'Warm!')
  )

act_day <- as.Date(with_tz(Sys.Date(), tzone = "Europe/Berlin"))

df <- weather_history("freiburg", 
                           start = "2000-01-01", 
                           end = act_day - 1, 
                           hourly = c("temperature_2m", "precipitation", "pressure_msl"), 
                           response_units = list(temperature_unit = "celsius",
                                                 precipitation_unit = "mm")
                           ) |> 
  na.omit() |> 
  rename(date = datetime,
         Temperatur = hourly_temperature_2m,
         Niederschlag = hourly_precipitation,
         Luftdruck = hourly_pressure_msl)

df_recent <- df |> 
  filter(as.Date(date) >= act_day - 5) |> 
  rename(Datum = date)
```



# Aktuell
## Row {height=20%}

```{r}
#| content: valuebox
#| title: "Datum"
list(
  color = "light",
  value = strftime(act_day, format = "%d.%m")
)
```

```{r}
#| content: valuebox
#| title: "Uhrzeit des letzten Updates"
list(
  color = "light",
  value = strftime((with_tz(Sys.time(), tzone = "Europe/Berlin") + 2*60*60), format="%H:%M")
)
```

```{r}
#| content: valuebox
#| title: "Wetter"
list(
  color = weather_now$color,
  value = weather_now$value
)
```

```{r}
#| content: valuebox
#| title: "Temperatur"
list(
  color = weather_now$color,
  value = paste0(df_now$temperature, "°C")
)
```


## Row {height=80%} 
```{r plotRecent1}
#| title: Temperatur (°C)

avg <- list(
  type = "average",
  name = "AVG"
)

df_recent |> 
  e_charts(Datum) |> 
  e_line(Temperatur) |>  
  e_mark_line(data =avg) |>
  e_legend(FALSE) |> 
  e_tooltip(trigger = "axis") |> 
  e_visual_map(Temperatur, orient = "horizontal", align = "bottom")  
```

```{r plotRecent2}
#| title: Niederschlag (mm)
df_recent |> 
  e_charts(Datum) |> 
  e_bar(Niederschlag) |>  
  e_legend(FALSE) |> 
  e_tooltip(trigger = "axis") |> 
  e_visual_map(Niederschlag, orient = "horizontal", align = "bottom") 
```


```{r plotRecent3}
#| title: Luftdruck (hPa)
# df_recent |> 
#   e_charts(Datum) |> 
#   e_line(Luftdruck) |>  
#   e_legend(FALSE) |> 
#   e_tooltip(trigger = "axis") 
```

# Vorhersage

```{r}
#| warning: false
#| output: false
forecast <- weather_forecast("freiburg", 
                 hourly = c("temperature_2m", "precipitation"), 
                 response_units = list(
                   temperature_unit = "celsius",
                   precipitation_unit = "mm")
                 )  |> 
  rename(date = datetime,
         "Temperatur (°C)" = hourly_temperature_2m,
         "Niederschlag (mm)" = hourly_precipitation) 

```

```{r}

forecast |> 
  e_charts(date) |> 
  e_line(`Temperatur (°C)`, x_index = 1, y_index = 1) |>  
  e_bar(`Niederschlag (mm)`) |> 
  e_grid(height = "35%") |> 
  e_grid(height = "35%", top = "50%") |> 
  e_y_axis(gridIndex = 1) |> 
  e_x_axis(gridIndex = 1) |> 
  e_tooltip(trigger = "axis") |> 
  e_datazoom(x_index = c(0, 1)) |> 
  e_color(color = c("red", "blue"))

```



# Statistik

## Row

```{r getMeans}
#| context: setup

df_hist <- df |> 
  filter(date < act_day) |> 
  select(-Luftdruck) |> 
  group_by(date = as.Date(date)) |> 
  reframe(temp_min = min(Temperatur, na.rm = T),
          temp_mean = round(mean(Temperatur, na.rm = T), digits = 2),
          temp_max = max(Temperatur, na.rm = T),
          prec = sum(Niederschlag, na.rm = T)) |> 
  ungroup()

df_last_year <- df_hist |> 
  filter(year(date) == year(act_day) - 1)

df_hist_mean <- df_hist |> 
  filter(year(date) < year(act_day) - 2 & year(date) >= 2000) |> 
  group_by(month = month(date), day = day(date)) |> 
  summarise(
    temp_min = round(mean(temp_min, na.rm = T), digits = 2),
    temp_mean = round(mean(temp_mean, na.rm = T), digits = 2),
    temp_max = round(mean(temp_max, na.rm = T), digits = 2),
    prec = round(mean(prec, na.rm = T), digits = 2)) |> 
  ungroup() |> 
  mutate(date = as.Date(paste0("2000-", month, "-", day)))
```

```{r}
ggplot(data = df_last_year) +
  coord_polar() +
  geom_linerange(aes(ymin = temp_min, ymax = temp_max, x = date, color = temp_mean)) +
  scale_x_date(date_breaks =  "1 month", date_labels = "%b") +
  scale_color_viridis_c(name = paste0("Mittlere Temperatur (°C) im Jahr ", unique(year(df_last_year$date)))) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        legend.position = "bottom",
        legend.title.position = "top",
        legend.title.align = 0.5,
        legend.box.just = "center",
        axis.title = element_blank())
```
```{r}
ggplot(data = df_hist_mean) +
  coord_polar() +
  geom_linerange(aes(ymin = temp_min, ymax = temp_max, x = date, color = temp_mean)) +
  scale_x_date(date_breaks =  "1 month", date_labels = "%b") +
  scale_color_viridis_c(name = paste0("Mittlere Temperatur (°C) von ", min(year(df_hist_mean$date)), " bis ",  max(year(df_hist_mean$date)))) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        legend.position = "bottom",
        legend.title.position = "top",
        legend.title.align = 0.5,
        legend.box.just = "center",
        axis.title = element_blank())
```

## Row

```{r}

```

